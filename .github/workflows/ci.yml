# This is a basic workflow to help you get started with Actions

name: CI Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  style-check:
    name: Clang-Format Code Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Build Dependencies
        run: |
          sudo chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        shell: bash
      - name: Build with LLVM
        run: |
          sudo chmod +x ./scripts/lint.sh
          ./scripts/lint.sh
        shell: bash

#==== debug build check jobs =======================================
  linux-build-clang:
    name: Clang Ubuntu/Linux Build Check
    runs-on: ubuntu-latest
    needs: style-check
    steps:
      - uses: actions/checkout@v3
      - name: Setup Build Dependencies
        run: |
          sudo chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        shell: bash
      - name: Build with LLVM
        run: |
          sudo chmod +x ./scripts/build.sh
          ./scripts/build.sh --clang
        shell: bash

  linux-build-gcc:
    name: GCC Ubuntu/Linux Build Check
    runs-on: ubuntu-latest
    needs: style-check
    steps:
      - uses: actions/checkout@v3
      - name: Setup Build Dependencies
        run: |
          sudo chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        shell: bash
      - name: Build with GCC
        run: |
          sudo chmod +x ./scripts/build.sh
          ./scripts/build.sh --gcc
        shell: bash

  windows-build-clang:
    name: Clang Windows Build Check
    runs-on: windows-latest
    needs: style-check
    steps:
      - uses: actions/checkout@v3
      - 
        uses: crazy-max/ghaction-chocolatey@v2.1.0
        with:
          args: -h
      - name: Setup Build Dependencies
        run: |
          ./scripts/install_dependencies.ps1
        shell: powershell
      - name: Build with LLVM
        #note: chocolatey doesnt set the vk sdk env var when it installs it for some reason, so we have to set it in order to build, ideally we would find a way around this in the future...
        run: |
          $env:VULKAN_SDK = Get-ItemPropertyValue 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' 'VULKAN_SDK'
          ./scripts/build.ps1 --clang
        shell: powershell

  windows-build-msvc:
    name: MSVC Windows Build Check
    runs-on: windows-latest
    needs: style-check
    steps:
      - uses: actions/checkout@v3
      - 
        uses: crazy-max/ghaction-chocolatey@v2.1.0
        with:
          args: -h
      - name: Setup Build Dependencies
        run: |
          ./scripts/install_dependencies.ps1
        shell: powershell
      - name: Build with MSVC
        #note: chocolatey doesnt set the vk sdk env var when it installs it for some reason, so we have to set it in order to build, ideally we would find a way around this in the future...
        run: |
          $env:VULKAN_SDK = Get-ItemPropertyValue 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' 'VULKAN_SDK'
          ./scripts/build.ps1 --msvc
        shell: powershell
#==== debug build check jobs end =======================================

#==== debug test build check jobs =======================================
  linux-test-build-clang:
    name: Clang Tests Ubuntu/Linux Build Check
    runs-on: ubuntu-latest
    needs: linux-build-clang
    steps:
      - uses: actions/checkout@v3
      - name: Setup Build Dependencies
        run: |
          sudo chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        shell: bash
      - name: Build with LLVM
        run: |
          sudo chmod +x ./scripts/build.sh
          ./scripts/build.sh --clang --test-only
        shell: bash

  linux-test-build-gcc:
    name: GCC Tests Ubuntu/Linux Build Check
    runs-on: ubuntu-latest
    needs: linux-build-gcc
    steps:
      - uses: actions/checkout@v3
      - name: Setup Build Dependencies
        run: |
          sudo chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        shell: bash
      - name: Build with GCC
        run: |
          sudo chmod +x ./scripts/build.sh
          ./scripts/build.sh --gcc --test-only
        shell: bash

  windows-test-build-clang:
    name: Clang Tests Windows Build Check
    runs-on: windows-latest
    #needs: windows-build-clang
    steps:
      - uses: actions/checkout@v3
      - 
        uses: crazy-max/ghaction-chocolatey@v2.1.0
        with:
          args: -h
      - name: Setup Build Dependencies
        run: |
          ./scripts/install_dependencies.ps1
        shell: powershell
      - name: Build with LLVM
        #note: chocolatey doesnt set the vk sdk env var when it installs it for some reason, so we have to set it in order to build, ideally we would find a way around this in the future...
        run: |
          $env:VULKAN_SDK = Get-ItemPropertyValue 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' 'VULKAN_SDK'
          ./scripts/build.ps1 --clang --test-only
        shell: powershell
      - uses: actions/upload-artifact@v2
        with:
          name: windows-clang-test-executable
          path: build/windows-clang/kolab-tests.exe

  windows-test-build-msvc:
    name: MSVC Tests Windows Build Check
    runs-on: windows-latest
    needs: windows-build-msvc
    steps:
      - uses: actions/checkout@v3
      - 
        uses: crazy-max/ghaction-chocolatey@v2.1.0
        with:
          args: -h
      - name: Setup Build Dependencies
        run: |
          ./scripts/install_dependencies.ps1
        shell: powershell
      - name: Build with MSVC
        #note: chocolatey doesnt set the vk sdk env var when it installs it for some reason, so we have to set it in order to build, ideally we would find a way around this in the future...
        run: |
          $env:VULKAN_SDK = Get-ItemPropertyValue 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' 'VULKAN_SDK'
          ./scripts/build.ps1 --msvc --test-only
        shell: powershell
      - uses: actions/upload-artifact@v2
        with:
          name: windows-msvc-test-executable
          path: build/windows-msvc/kolab-tests.exe
#==== debug test build check jobs end =======================================

#==== debug test executions ================================================
  windows-clang-test:
    name: Windows Clang Tests
    runs-on: windows-latest
    needs: windows-test-build-clang
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: windows-clang-test-executable
      - name: Run Tets
        run: |
          ./kolab-tests.exe
        shell: powershell
#==== debug test executions end ============================================