# This is a basic workflow to help you get started with Actions

name: CI Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  style-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Build Dependencies
        run: |
          sudo chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        shell: bash
      - name: Build with LLVM
        run: |
          sudo chmod +x ./scripts/lint.sh
          ./scripts/lint.sh
        shell: bash

#build check jobs
  build-clang:
    name: Clang Ubuntu/Linux Build Check
    runs-on: ubuntu-latest
    needs: style-check
    steps:
      - uses: actions/checkout@v3
      - name: Setup Build Dependencies
        run: |
          sudo chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        shell: bash
      - name: Build with LLVM
        run: |
          sudo chmod +x ./scripts/build.sh
          ./scripts/build.sh
        shell: bash

  build-gcc:
    name: GCC Ubuntu/Linux Build Check
    runs-on: ubuntu-latest
    needs: style-check
    steps:
      - uses: actions/checkout@v3
      - name: Setup Build Dependencies
        run: |
          sudo chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        shell: bash
      - name: Build with LLVM
        run: |
          sudo chmod +x ./scripts/build.sh
          ./scripts/build.sh
        shell: bash

  build-msvc-windows:
    name: MSVC Windows Build Check
    runs-on: windows-latest
    needs: style-check
    steps:
      - uses: actions/checkout@v3
      - 
        uses: crazy-max/ghaction-chocolatey@v2.1.0
        with:
          args: -h
      - name: Setup Build Dependencies
        run: |
          ./scripts/install_dependencies.ps1
        shell: powershell
      - name: Build with LLVM
        #note: chocolatey doesnt set the vk sdk env var when it installs it for some reason, so we have to set it in order to build, ideally we would find a way around this in the future...
        run: |
          $env:VULKAN_SDK = Get-ItemPropertyValue 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' 'VULKAN_SDK'
          ./scripts/build.ps1
        shell: powershell
